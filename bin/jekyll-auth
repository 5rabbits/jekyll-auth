#!/usr/bin/env ruby
# Command-line interface for jekyll-auth

require 'mercenary'
require 'git'
require 'jekyll-auth'
require 'colorator'

def changed?
  git = Git.init
  git.diff('HEAD', 'config.ru').entries.length != 0 || git.diff('HEAD', 'Rakefile').entries.length != 0
end

Mercenary.program(:"jekyll-auth") do |p|
  p.version     JekyllAuth::VERSION
  p.description "A simple way to use Github OAuth to serve a protected jekyll site to your GitHub organization"
  p.syntax      'jekyll-auth <subcommand> options'

  p.command(:new) do |c|
    c.syntax 'new'
    c.description "Initialize an existing Jekyll site as a Jekyll Auth site"
    c.action do |args, options|
      source = File.expand_path( "../templates", File.dirname(__FILE__) )
      destination = Dir.pwd
      puts "Initiating new Jekyll Auth site in #{destination}"

      ["Rakefile", "config.ru", ".gitignore"].each do |file|
        if File.exist? "#{destination}/#{file}"
          puts "* #{destination}/#{file} already exists... skipping."
        else
          puts "* creating #{destination}/#{file}"
          FileUtils.cp "#{source}/#{file}", "#{destination}/#{file}"
        end
      end

      if changed?
        system "git status"
        puts "Looks like we've made some changes, you may want to do a git commit and git push sometime soon"
      end

      puts "Setup complete. Run jekyll-auth to view the authenticated site."
    end
  end

  # Run the standard jekyll build command
  # Called by Rake task, to allow the gem
  # to add functionality here in the future
  p.command(:build) do |c|
    c.syntax 'build'
    c.description "Build the Jekyll site"
    c.action do |args, options|
      system "bundle exec jekyll build"
    end
  end

  p.command(:team_id) do |c|
    c.syntax 'team_id --org <ORG> --team <TEAM>'
    c.description "Retrieve a team's ID"
    c.option 'org', '--org <ORG>', 'The GitHub Organization, e.g., "jekyll"'
    c.option 'team', '--team <TEAM>', 'The team name, e.g., "maintainers"'

    c.action do |args, options|

      if ENV["GITHUB_TOKEN"].to_s.blank?
        puts "You'll need to go to https://github.com/settings/tokens/new and create a personal access token".red
        puts "Once you've got the token, prefix the jekyll-auth command with GITHUB_TOKEN=[YOUR TOKEN]".red
        puts "You can also add it to a `.env` file in this directory".red
        exit 1
      end

      org = options["org"] || ENV["GITHUB_ORG_ID"]
      team = options["team"]

      if org.nil? || team.nil?
        puts "An org name and team ID are required.".red
        puts "Usage: jekyll-auth team_id --org <ORG> --team <TEAM>"
        exit 1
      end

      client = Octokit::Client.new :access_token => ENV["GITHUB_TOKEN"]
      client.auto_paginate = true
      teams = client.organization_teams org
      found = teams.find { |t| t[:slug] == team }

      if found
        puts "The team ID for `@#{org}/#{team}` is `#{found[:id]}`".green
      else
        puts "Couldn't find the `@#{org}/#{team}` team.".red
      end
    end
  end

  p.command(:serve) do |c|
    c.syntax "serve"
    c.description "Run Jekyll Auth site locally"
    c.action do |args, options|

      # Ensure environmental variables are set
      ["GITHUB_CLIENT_ID", "GITHUB_CLIENT_SECRET"].each do |var|
        next unless ENV[var].nil?
        puts "Whoops. Looks like you forgot to tell Jekyll Auth about your app".red
        puts "Be sure to run export GITHUB_CLIENT_ID=[client id], export GITHUB_CLIENT_SECRET=[client secret], and export GITHUB_ORG_ID=[org id] (or GITHUB_TEAM_ID)".red
        puts "See the readme for more information on where to find these".red
        exit 1
      end

      # build site
      p.go ["build"]

      puts "Spinning up the server with authentication. Use CTRL-C to stop."
      puts "To preview the site without authentication, use the `jekyll serve` command"
      system "bundle exec rackup -p 4000"

    end
  end

  p.default_command(:serve)
end
